#!/usr/bin/env tsx

/**
 * Environment Variables Verification Script
 * Checks that all required environment variables are set
 */

import { config } from 'dotenv'
import { resolve } from 'path'

// Load .env.local if it exists
config({ path: resolve(process.cwd(), '.env.local') })

const requiredEnvVars = {
  critical: [
    'NEXT_PUBLIC_SUPABASE_URL',
    'NEXT_PUBLIC_SUPABASE_ANON_KEY',
    'SUPABASE_SERVICE_ROLE_KEY',
    'OPENAI_API_KEY',
  ],
  optional: [
    'NEXT_PUBLIC_APP_URL',
  ],
}

function verifyEnv() {
  console.log('üîç Verificando variables de entorno...\n')

  let hasErrors = false
  let hasWarnings = false

  // Check critical variables
  console.log('üìã Variables CR√çTICAS:')
  requiredEnvVars.critical.forEach((varName) => {
    const value = process.env[varName]
    if (!value) {
      console.log(`  ‚ùå ${varName}: NO CONFIGURADA`)
      hasErrors = true
    } else if (value.includes('your_') || value.includes('tu_')) {
      console.log(`  ‚ö†Ô∏è  ${varName}: Valor de placeholder detectado`)
      hasErrors = true
    } else {
      console.log(`  ‚úÖ ${varName}: Configurada`)
    }
  })

  console.log('\nüìã Variables OPCIONALES:')
  requiredEnvVars.optional.forEach((varName) => {
    const value = process.env[varName]
    if (!value) {
      console.log(`  ‚ö†Ô∏è  ${varName}: No configurada (usar√° default)`)
      hasWarnings = true
    } else {
      console.log(`  ‚úÖ ${varName}: ${value}`)
    }
  })

  console.log('\nüîí Verificaciones de seguridad:')

  // Check Supabase URL format
  const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
  if (supabaseUrl) {
    if (!supabaseUrl.startsWith('https://')) {
      console.log('  ‚ùå SUPABASE_URL debe comenzar con https://')
      hasErrors = true
    } else if (!supabaseUrl.includes('.supabase.co')) {
      console.log('  ‚ö†Ô∏è  SUPABASE_URL no parece ser una URL v√°lida de Supabase')
      hasWarnings = true
    } else {
      console.log('  ‚úÖ SUPABASE_URL tiene formato v√°lido')
    }
  }

  // Check OpenAI API key format
  const openaiKey = process.env.OPENAI_API_KEY
  if (openaiKey) {
    if (!openaiKey.startsWith('sk-')) {
      console.log('  ‚ùå OPENAI_API_KEY debe comenzar con sk-')
      hasErrors = true
    } else {
      console.log('  ‚úÖ OPENAI_API_KEY tiene formato v√°lido')
    }
  }

  // Check service role key is not exposed
  const serviceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY
  const isInClientCode = false // En producci√≥n, revisar bundles
  if (serviceRoleKey && isInClientCode) {
    console.log('  ‚ö†Ô∏è  ADVERTENCIA: service_role_key podr√≠a estar expuesta en c√≥digo cliente')
    hasWarnings = true
  } else if (serviceRoleKey) {
    console.log('  ‚úÖ SUPABASE_SERVICE_ROLE_KEY correctamente protegida')
  }

  // Summary
  console.log('\n' + '='.repeat(60))
  if (hasErrors) {
    console.log('‚ùå VERIFICACI√ìN FALLIDA - Configuraci√≥n incompleta o incorrecta')
    console.log('\nüìñ Consulta DEPLOYMENT.md para m√°s informaci√≥n')
    process.exit(1)
  } else if (hasWarnings) {
    console.log('‚ö†Ô∏è  VERIFICACI√ìN CON ADVERTENCIAS - Revisa los warnings arriba')
    console.log('\nüìñ Consulta DEPLOYMENT.md para m√°s informaci√≥n')
    process.exit(0)
  } else {
    console.log('‚úÖ VERIFICACI√ìN EXITOSA - Todas las variables configuradas')
    process.exit(0)
  }
}

// Run verification
verifyEnv()
